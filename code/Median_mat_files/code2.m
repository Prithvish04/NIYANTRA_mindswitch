function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 09-Sep-2016 14:58:40.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 12xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [1.68225153850844;1.687733747403;1.70088193744179;3.56593361078692;3.45662522547845;3.60147221533988;0.723617941859257;0.725898031813287;0.726295797281729;13.3568434105256;16.3443348591275;14.6281154737623];
x1_step1_gain = [2.42406547682654;2.32126603953241;2.4914707519352;0.71947883299075;0.676700786631049;0.758646775899407;6.32337134845644;6.53337286453065;6.32832003762608;0.147296617569698;0.170208028017692;0.160878229205209];
x1_step1_ymin = -1;

% Layer 1
b1 = [1.9388755152654695;-1.7657624971171937;0.99331851120019965;1.6046076859646436;2.8311564381552263;-0.65896314278233747;0.36827058541854368;0.85781888072700374;0.86234597011293657;-0.63454560712011354;-0.30905872916485977;0.60038580602995995;1.1628641416383263;0.081258879644447793;-0.72776423276136115;-1.083673434230628;2.3439936000959563;-1.2332899150090182;-2.964162734644856;-1.8464624531989906];
IW1_1 = [-0.60837987603202548 -0.5452024281247948 0.88423904897603678 -0.11198999188223187 -0.43639058618618076 -0.43057881521192803 -0.38708869516691996 -0.68161483127621669 -0.46020876586034537 0.075311750852342318 -0.67855346740081213 0.5409223073577607;0.30269153108792934 1.7171315713480038 -1.798091807578081 -2.5215543390589503 0.96308418899472781 -1.0901480610188006 1.7784580126455807 -0.79869559190128747 -1.4098474945610371 -0.90478433657742918 -0.21091115557450571 0.7539648056271403;-0.9261704758320396 -1.5041745695576452 0.90719067644050477 -1.8218602429024131 -0.47518010872606897 0.0087889389073624521 -0.73136744346382387 1.23193595022858 0.32893062788701755 -0.093745753963854053 0.50908171363949106 -0.55159129505579663;-1.1779638374668686 -0.80865166240817188 0.43359078927677991 0.83794278737064909 0.59352715724908622 0.54506847176495699 -0.5820265726171886 0.70812696952603704 0.29829297957959378 -0.33039623006459373 -0.82140689090990082 0.17244819091935032;-1.6806665104353193 -0.80088621778284896 0.97594390023664979 0.031179436619893523 1.4278405629114197 1.3527064621044671 2.4896353886991518 -0.32727782175747178 -0.90211198692534778 -4.0609450568256156 0.69532233024764267 1.0927203564579941;1.9163038017827356 -0.50126223246351653 -0.12163943558008114 1.2829826020846888 -1.5041991968393105 1.6482996666500007 -0.9037927140367088 -2.4163440345882075 1.5954160857203197 0.002589279182019677 1.9333546336872405 0.55971226471025703;-1.5786936954495148 -0.10544376923401448 0.32951221273739878 -1.3729266932781725 0.92121134120359394 0.064972364107126188 0.90025502117000744 -0.98704020413468907 -0.98943626350648595 0.65713187706202514 0.74519142731069088 -0.29054258076916212;-1.1546642138742127 1.1416100612056264 1.5638129572868646 0.77157921928455653 0.95349493206703573 0.17261222399174578 0.23781492184918923 0.49820129624004517 -1.0204063064812587 -0.29940282368276683 0.48021015821192181 0.42399075211556236;-0.32505011338874562 -1.3354601186109287 2.3994790391252891 -0.1453773898184777 0.92517653390619603 0.74048833256388513 -1.2929732083237186 -1.6472259372575071 -0.59039141940721984 0.39757970063740572 0.83291190871653908 1.2593754794560652;1.1943763919960959 1.033266535168837 0.11840989868929022 -0.22289432050801739 -1.5701395864114018 -1.1912035159641039 0.59780869950328286 -1.8455952751909515 2.0759459470113351 -0.44334162588922388 0.33816454252693801 1.7923404826529115;-0.90801066982721257 -0.31139034999840648 0.7390899872570792 0.22689588616557785 -0.18353747533457926 -0.95739882370405227 -0.11113788905469471 -1.1706990863286628 -0.61620747085722316 -0.15946926670261288 0.47678954651887318 1.0913939497100194;0.41422818467373712 -1.3812146713921118 -1.2657297073352436 -1.2988072593248359 2.0128821160281527 0.065289061196134215 0.56558078441922288 1.2791342629903946 2.87923965825463 -0.11104090236506049 1.5792460758774298 0.8001084433389779;-0.5357494669799594 2.7953922051039597 0.034450809860246158 0.17666198567145833 1.4393235303891223 -0.54914105797184409 2.160392355716112 1.0234493174293027 1.0463809567275575 -2.6480797823609299 0.046230095781722678 1.3129021138096284;1.2010450036834392 1.352227280004717 0.70735894865644589 1.2110579664410797 -1.3096351356937708 -1.5887871401300182 -1.2621638426017316 -0.99003537525151375 -0.68954211969880719 -0.96088660198915721 0.64084348262655244 -1.1843889142738508;-0.75098406441716514 0.68461974294067329 -0.64251461992376047 1.4297636468210202 -1.3806955770101546 0.67417077321491448 -1.194294418527164 -1.8501558613701077 -0.41170511474686888 -0.98691655892002583 -0.82695493069014636 1.4019594623858249;-1.4814412215358632 1.9149565697509401 0.92601560527186277 1.4709939523535924 1.2034711173342834 2.8623770874004624 -1.0696333721664748 -0.39177620121339518 0.56024407177617463 -0.02772717902324421 -0.80874969657949902 -2.3028313997917533;-0.5160027743752349 -1.3958098842597195 1.1651010234484698 -2.2334368820015604 -0.44781246557583332 0.5615570751489658 0.21094247830020108 1.1676276417962634 2.1362528264366878 1.6852241183941206 0.10516653597147387 0.21883357634984027;-1.6634060206953856 1.377244945685028 1.9828072099846585 0.934829263262551 0.27304017563925775 0.81760624549520811 1.2513798119599349 0.0052188361539121392 -1.4328076449156999 -0.50161422633694719 1.1119631044437253 0.64487303648040184;-2.2440761938378997 -1.0519921565690542 1.3058406206905664 1.2740807556440312 0.40754769074702996 1.6927625572507847 0.23468018490809989 -0.10559229289696898 0.19058533655176771 1.2628960212579907 1.3726746202544695 1.6359265080534646;-0.54060015365930558 -0.83184526271536585 0.87087916654809339 0.03837429314022435 0.69147053489024335 -0.84581238119945334 -0.8183193620748459 -0.44743276171135876 0.68750384041751089 0.25914954292924758 -0.2197608397871999 -0.45388848595300413];

% Layer 2
b2 = [-0.12902342268753461;0.74363485845735533;1.0122357021449337];
LW2_1 = [-0.30754933280808744 3.5938031844200293 0.34438544623617479 -0.50120862606489092 2.5803902206379714 -2.1668759685887369 -0.81956251647786094 1.8921465381437717 -2.3127313833282837 2.7791025144882999 0.43661945576777583 -2.2020057319087187 -0.45491864780126795 2.5221006430935247 2.4998746944401025 3.1568525005055479 2.53198787628039 -2.5652346187460449 -1.0145180068634325 1.6207672674053755;0.089837027662001925 -0.45103884046291631 1.3967259810916137 -0.39099605536840953 -4.7855374962235464 -2.3465767139220883 -0.075685394961570021 0.13790163477033052 2.2505102292705184 0.10975170423441466 -0.8636263168114755 -2.1986136316873921 -3.2944330349233066 -1.8383229369062912 -0.0055463990538295038 -4.3714037998744928 -1.0943604979664396 0.16205564241268042 4.0114957463140559 -0.77672203566066411;-0.86099485744925697 -2.5233809846518298 -1.9909356325606042 1.0561026177837867 2.3885483047644125 3.5686469768138176 1.881123957631371 -1.1174240347118933 1.4263785965676616 -1.8141389051829744 -0.2313890120743661 3.5191656875471797 3.7994730743795584 -0.10725429185482104 -2.3259713058683444 -0.38685720021138092 -2.6323368882664857 2.0655120241345983 -3.252622086833775 -0.15371995054807508];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numer = exp(n);
denom = sum(numer,1);
denom(denom == 0) = 1;
a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
